Source : https://blog.logrocket.com/unit-testing-node-js-applications-using-mocha-chai-and-sinon/

Title : Unit testing Node.js applications using Mocha, Chai, and Sinon

Tests help document the core features of an application. Properly written tests ensure that new features do not introduce changes that break the application.

Mocha
- Is a feature-rich JavaScript test framework running on Node.js and in the browser.
- It encapsulates tests in test suites (describe-block) and test cases (it-block).
Features 
- browser support
- simple async support, including promises
- test coverage reporting
- async test timeout support
- before, after, beforeEach, afterEach Hooks, etc.


Chai
- Does equality checks or compare expected results against actual results.
- exposes three assertion interfaces: expect(), assert(), and should()


Sinon
Often, the method that is being tested is required to interact with or call other external methods. Therefore you need a utility to spy, stub, or mock those external methods. This is exactly what Sinon does for you.

-Spy 
A spy is a fake function that keeps track of arguements, returns value, the value of this and exception is thrown (if any) for all its calls.

-Stub 
A stub is a spy with predetermined behavior.
We can use a stub to : 
- Take a predetermined action, like throwing an exception.
- Provide a predetermined response 
- Prevent a specifi method from being called directly(especially when it triggers undesired behaviors like HTTP requests)

-Mock 
A mock is a fake function (like a spy) with pre-programmed behavior (like a stub) as well as pre-programmed expectations.

We can use a mock to:

- Verify the contract between the code under test and the external methods that it calls
- Verify that an external method is called the correct number of times
- Verify an external method is called with the correct parameters

The rule of thumb for a mock is: if you are not going to add an assertion for some specific call, donâ€™t mock it. Use a stub instead.


Repositories-Service-Controller pattern 
*Breaks up the business layer of the app into three distinc layers

--Repository Class--
-Handles data into and out of our data store.
-Is used in between service layer and model layer.
-Example in UserRepository you would create methods that write/read a user to and from the database

--Service Class--
-It calls the repository class and can combine their data to form new, more complex business objects. 
-It is an abstraction between the controller and the repository.
-For example, the UserService would be responsible for performing the required logic in order to create a new user.

--Controller--
-Contains very little logic and is used to make calls to services.
-Rarely make direct calls to the repositories unless there's a valid reason.
-Controller will perform basic checks on the data returned from the services in order to send a response back to the client.
